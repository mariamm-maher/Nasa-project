import { useEffect, useState, useMemo, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { BookOpen, ExternalLink, Search, ChevronLeft, ChevronRight } from "lucide-react";
import GalacticBackground from "@/components/GalacticBackground";
import { useSourcesStore } from "@/stores/SourcesStore";
import OptimizedNavigation from "@/components/OptimizedNavigation";

// Pagination constants
const ITEMS_PER_PAGE = 6;

const SourcesPage = () => {
  const [summaries, setSummaries] = useState({});
  const [loadingIdx, setLoadingIdx] = useState(null);
  const [search, setSearch] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const { sources, loading, error, fetchSources, searchSources } = useSourcesStore();

  useEffect(() => {
    fetchSources();
    // eslint-disable-next-line
  }, []);

  // Debounced search to optimize performance
  const handleSearchChange = useCallback(
    async (e) => {
      const value = e.target.value;
      setSearch(value);
      setCurrentPage(1); // Reset to first page when searching
      
      if (value.trim() === "") {
        fetchSources();
      } else {
        await searchSources(value);
      }
    },
    [fetchSources, searchSources]
  );

  // Normalize API data for rendering (memoized for performance)
  const displayResources = useMemo(() => {
    if (Array.isArray(sources)) {
      return sources.map((item, index) => ({
        id: `${item.Title || item.title}-${index}`, // Unique ID for better keys
        title: item.Title || item.title,
        link: item.Link || item.link,
        year: item.Year || item.year || "-",
      }));
    } else if (sources && sources.data) {
      return sources.data.map((item, index) => ({
        id: `${item.Title || item.title}-${index}`,
        title: item.Title || item.title,
        link: item.Link || item.link,
        year: item.Year || item.year || "-",
      }));
    }
    return [];
  }, [sources]);

  // Pagination calculations (memoized for performance)
  const paginationData = useMemo(() => {
    const totalItems = displayResources.length;
    const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = Math.min(startIndex + ITEMS_PER_PAGE, totalItems);
    const currentItems = displayResources.slice(startIndex, endIndex);
    
    return {
      totalItems,
      totalPages,
      startIndex,
      endIndex,
      currentItems,
      showingStart: totalItems > 0 ? startIndex + 1 : 0,
      showingEnd: endIndex,
    };
  }, [displayResources, currentPage]);

  const handlePageChange = useCallback((page) => {
    if (page >= 1 && page <= paginationData.totalPages) {
      setCurrentPage(page);
      // Reset summaries when changing pages to avoid index confusion
      setSummaries({});
      setLoadingIdx(null);
    }
  }, [paginationData.totalPages]);

  const handleSummarize = useCallback((globalIdx, localIdx) => {
    const summaryKey = `${currentPage}-${localIdx}`;
    setLoadingIdx(summaryKey);
    setTimeout(() => {
      setSummaries((prev) => ({
        ...prev,
        [summaryKey]:
          "This is a placeholder summary generated by AI. It will provide a concise overview of the publication's key findings and significance.",
      }));
      setLoadingIdx(null);
    }, 1200);
  }, [currentPage]);  // Generate page numbers for pagination
  const getPageNumbers = useMemo(() => {
    const { totalPages } = paginationData;
    const maxVisiblePages = 5;
    const pages = [];
    
    if (totalPages <= maxVisiblePages) {
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      const startPage = Math.max(1, currentPage - 2);
      const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
      
      for (let i = startPage; i <= endPage; i++) {
        pages.push(i);
      }
    }
    
    return pages;
  }, [paginationData, currentPage]);

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#0B0B1E] to-[#1B262C] text-white px-4 py-12 flex flex-col items-center relative overflow-hidden">
      <GalacticBackground />
      <div className="relative z-10 w-full flex flex-col items-center">
        <header className="mb-12 text-center">
          <h1 className="text-4xl md:text-5xl font-extrabold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent drop-shadow-glow mb-2">
            NASA Space Biology Resources
          </h1>
          <p className="text-lg md:text-xl text-cyan-200/80 max-w-2xl mx-auto">
            Browse through all available publications. Click summarize to get an
            AI-generated overview.
          </p>
        </header>

        {/* Search Bar */}
        <motion.div
          className="w-full max-w-xl flex items-center bg-[#181A2A]/80 border-2 border-cyan-400/40 rounded-2xl shadow-xl px-6 py-3 mb-8 backdrop-blur-md focus-within:border-cyan-400/80 transition-all duration-300 relative group"
          whileHover={{ scale: 1.03, boxShadow: "0 0 32px 4px #67e8f9" }}
          whileFocusWithin={{ scale: 1.05, boxShadow: "0 0 48px 8px #a21caf" }}
        >
          <Search className="w-5 h-5 text-cyan-400/80 mr-3" />
          <input
            type="text"
            className="flex-1 bg-transparent text-white placeholder-cyan-300/60 text-lg focus:outline-none"
            placeholder="Search resources..."
            value={search}
            onChange={handleSearchChange}
            aria-label="Search resources"
          />
        </motion.div>

        {loading && (
          <div className="text-cyan-300 mb-8">Loading resources...</div>
        )}
        {error && <div className="text-red-400 mb-8">{error}</div>}

        {/* Item Count Display */}
        {!loading && paginationData.totalItems > 0 && (
          <motion.div
            className="mb-6 text-cyan-200/80 text-lg font-medium"
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            Showing {paginationData.showingStart}â€“{paginationData.showingEnd} of{" "}
            {paginationData.totalItems} resources
          </motion.div>
        )}

        {/* Resources Grid */}
        <div className="w-full max-w-6xl mb-8">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentPage} // This will trigger re-animation on page change
              className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.5, staggerChildren: 0.1 }}
            >
              {!loading && paginationData.currentItems.length === 0 && (
                <div className="col-span-full text-center text-cyan-200/60 text-lg mt-8">
                  No resources found.
                </div>
              )}
              {paginationData.currentItems.map((res, localIdx) => {
                const globalIdx = paginationData.startIndex + localIdx;
                const summaryKey = `${currentPage}-${localIdx}`;
                const isLoading = loadingIdx === summaryKey;

                return (
                  <motion.div
                    key={res.id}
                    className="bg-[#181A2A]/90 border border-cyan-400/20 rounded-2xl p-6 shadow-2xl flex flex-col gap-3 backdrop-blur-md relative h-full min-h-[260px] justify-between"
                    initial={{ opacity: 0, y: 30 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: localIdx * 0.1 }}
                    whileHover={{ scale: 1.02, boxShadow: "0 0 24px 4px rgba(103, 232, 249, 0.3)" }}
                  >
                    <div>
                      <div className="flex items-center gap-2 mb-2">
                        <BookOpen className="w-5 h-5 text-purple-400" />
                        <span className="font-bold text-lg text-cyan-300">
                          {res.title}
                        </span>
                      </div>
                      <a
                        href={res.link}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1 text-cyan-400 hover:text-pink-400 underline underline-offset-4 transition-colors mb-2"
                      >
                        <ExternalLink className="w-4 h-4" />
                        View Resource
                      </a>
                      <AnimatePresence>
                        {summaries[summaryKey] && (
                          <motion.div
                            className="mt-4 bg-[#23244a]/80 border border-cyan-400/10 rounded-xl p-4 text-cyan-100/90 shadow-inner"
                            initial={{ opacity: 0, height: 0 }}
                            animate={{ opacity: 1, height: "auto" }}
                            exit={{ opacity: 0, height: 0 }}
                            transition={{ duration: 0.5 }}
                          >
                            {summaries[summaryKey]}
                          </motion.div>
                        )}
                      </AnimatePresence>
                    </div>
                    <motion.button
                      onClick={() => handleSummarize(globalIdx, localIdx)}
                      disabled={isLoading}
                      className={`mt-auto px-5 py-2 rounded-xl font-semibold text-base transition-all duration-300 shadow-lg focus:outline-none focus:ring-2 focus:ring-cyan-400/60 ${
                        isLoading
                          ? "bg-gray-700 text-gray-400 cursor-wait"
                          : "bg-gradient-to-r from-cyan-500 to-purple-500 text-white hover:from-cyan-400 hover:to-purple-600 transform hover:scale-105 shadow-cyan-400/30 hover:shadow-pink-400/30"
                      }`}
                      whileHover={
                        !isLoading
                          ? { scale: 1.07, boxShadow: "0 0 16px 2px #67e8f9" }
                          : {}
                      }
                      whileTap={!isLoading ? { scale: 0.97 } : {}}
                    >
                      {isLoading ? (
                        <span className="flex items-center gap-2">
                          <span className="animate-spin rounded-full h-4 w-4 border-b-2 border-cyan-400"></span>
                          Summarizing...
                        </span>
                      ) : (
                        "Summarize"
                      )}
                    </motion.button>
                  </motion.div>
                );
              })}
            </motion.div>
          </AnimatePresence>
        </div>

        {/* Pagination Controls */}
        {!loading && paginationData.totalPages > 1 && (
          <motion.div
            className="flex flex-col items-center gap-4 mt-8"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            {/* Page Info */}
            <div className="text-cyan-200/70 text-sm">
              Page {currentPage} of {paginationData.totalPages}
            </div>

            {/* Pagination Buttons */}
            <div className="flex items-center gap-2 flex-wrap justify-center">
              {/* Previous Button */}
              <motion.button
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className={`flex items-center gap-2 px-4 py-2 rounded-xl font-semibold transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-cyan-400/60 ${
                  currentPage === 1
                    ? "bg-gray-800/50 text-gray-500 cursor-not-allowed border border-gray-600/30"
                    : "bg-gradient-to-r from-cyan-600/80 to-purple-600/80 text-white hover:from-cyan-500 hover:to-purple-500 border border-cyan-400/30 hover:border-cyan-400/60 shadow-lg hover:shadow-cyan-400/30"
                }`}
                whileHover={currentPage !== 1 ? { scale: 1.05, boxShadow: "0 0 16px 2px #67e8f9" } : {}}
                whileTap={currentPage !== 1 ? { scale: 0.95 } : {}}
              >
                <ChevronLeft className="w-4 h-4" />
                <span className="hidden sm:inline">Previous</span>
              </motion.button>

              {/* Page Numbers */}
              {getPageNumbers.map((pageNum) => (
                <motion.button
                  key={pageNum}
                  onClick={() => handlePageChange(pageNum)}
                  className={`px-4 py-2 rounded-xl font-semibold transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-cyan-400/60 ${
                    currentPage === pageNum
                      ? "bg-gradient-to-r from-cyan-500 to-purple-500 text-white shadow-lg shadow-cyan-400/30 border border-cyan-400/60"
                      : "bg-[#181A2A]/80 text-cyan-200 hover:bg-gradient-to-r hover:from-cyan-600/50 hover:to-purple-600/50 border border-cyan-400/20 hover:border-cyan-400/40 hover:text-white"
                  }`}
                  whileHover={
                    currentPage !== pageNum
                      ? { scale: 1.05, boxShadow: "0 0 12px 2px rgba(103, 232, 249, 0.3)" }
                      : { scale: 1.02 }
                  }
                  whileTap={{ scale: 0.95 }}
                >
                  {pageNum}
                </motion.button>
              ))}

              {/* Next Button */}
              <motion.button
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === paginationData.totalPages}
                className={`flex items-center gap-2 px-4 py-2 rounded-xl font-semibold transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-cyan-400/60 ${
                  currentPage === paginationData.totalPages
                    ? "bg-gray-800/50 text-gray-500 cursor-not-allowed border border-gray-600/30"
                    : "bg-gradient-to-r from-cyan-600/80 to-purple-600/80 text-white hover:from-cyan-500 hover:to-purple-500 border border-cyan-400/30 hover:border-cyan-400/60 shadow-lg hover:shadow-cyan-400/30"
                }`}
                whileHover={
                  currentPage !== paginationData.totalPages
                    ? { scale: 1.05, boxShadow: "0 0 16px 2px #67e8f9" }
                    : {}
                }
                whileTap={currentPage !== paginationData.totalPages ? { scale: 0.95 } : {}}
              >
                <span className="hidden sm:inline">Next</span>
                <ChevronRight className="w-4 h-4" />
              </motion.button>
            </div>
          </motion.div>
        )}
      </div>
      <OptimizedNavigation />
    </div>
  );
};

export default SourcesPage;
